-- VIEW
--1 - VIEW ON PRODUCT AND QUANTITY TABLES

CREATE OR REPLACE VIEW PRO_DETAIL
AS

SELECT P.PRO_ID, P.PRO_NAME, P.PRO_COST, 
                PO.PRO_JOB_ID,PO.PRO_JOB_QTY,PO.TOTAL_COST
                
FROM PRODUCTS P JOIN PRO_ORDER PO
ON(P.PRO_ID = PO.PRO_ID);

SELECT *  FROM PRO_DETAIL;

--ORDER_STATUS AND DETAILS

CREATE OR REPLACE VIEW ORDER_STATUS
AS 

SELECT CU.CUST_ID,OD.ORDER_ID,IV.BILL_ID,OD.ORDER_DATE,
                    OD.EXP_DISP_DATE,IV.DISPATCH_DATE,IV.TOTAL_AMOUNT
FROM CUSTOMER CU JOIN ORDERS OD
ON (CU.CUST_ID = OD.CUST_ID)
JOIN INVOICE IV
ON(OD.ORDER_ID = IV.ORDER_ID);

SELECT * FROM ORDER_STATUS;

--VIEW ON CUSTOMER DETAIL, ORDER_DETAILS, BILL_INFORMATION

CREATE OR REPLACE VIEW CUST_BILL_DETAIL
AS

SELECT C.CUST_ID, C.CUST_NAME, O.ORDER_ID,O.ORDER_DATE,
                  I.BILL_ID,I.TOTAL_AMOUNT,I.DISPATCH_DATE,I.DUE_AMOUNT                 
FROM CUSTOMER C JOIN ORDERS O
ON (C.CUST_ID =O. CUST_ID)
JOIN INVOICE I
ON (O.ORDER_ID=I.ORDER_ID );

SELECT * FROM CUST_BILL_DETAIL;
--=======================================================================================================================================

--CALCULATE TOTAL_COST 

CREATE OR REPLACE FUNCTION TOTAL_COST(P_ID NUMBER ,QTY NUMBER)
RETURN NUMBER
IS 
TTL_CT NUMBER(10) := 0;
PRIC NUMBER ;

BEGIN 
SELECT PRO_COST INTO PRIC 
FROM PRODUCTS 
WHERE PRO_ID = P_ID;
TTL_CT :=  PRIC * QTY ;
RETURN TTL_CT;
END;



-- CALCULATE TOTAL_PRICE IN PRO_ORD

SET SERVEROUTPUT ON
CREATE OR REPLACE FUNCTION TOTAL_AMOUNT(TOTAL_COST NUMBER, ORDER_ID NUMBER)
RETURN NUMBER
IS
TOTAL_AMT NUMBER := 0;
RSLT NUMBER;

BEGIN
        SELECT PRICE INTO PRIC
        FROM PRODUCT 
        WHERE PRODUCT_ID = PRO_ID;
        
        TOTAL := QUAN * PRIC;
        
        RETURN TOTAL;
END;


--CALCULATE DUE_AMOUNT 

CREATE OR REPLACE FUNCTION DU_AMT(TOTAL_AMOUNT NUMBER, PAID_AMOUNT NUMBER)
RETURN NUMBER
IS
DU_AMT NUMBER ;

BEGIN
SELECT ((TOTAL_AMOUNT) -(PAID_AMOUNT))  INTO  DU_AMT
FROM  INVOICE 
WHERE ORDER_ID =ORDER_ID;
    
RETURN DU_AMT;
END;


--=================================================================================================================================================


CREATE OR REPLACE PROCEDURE PRO_COST_JQ (OR_ID NUMBER, P_ID NUMBER, P_J_ID NUMBER,P_QTY NUMBER)
IS

BEGIN
INSERT INTO PRO_ORDER (ORDER_ID,PRO_ID, PRO_JOB_ID, PRO_JOB_QTY,TOTAL_COST)
VALUES(OR_ID, P_ID,P_J_ID,P_QTY, TOTAL_COST (P_ID,P_QTY));
END;

EXECUTE PRO_COST_JQ ();

SELECT  *  FROM PRO_ORDER;



CREATE OR REPLACE PROCEDURE E_OID(CID NUMBER,C_N VARCHAR2, C_PH NUMBER,C_MAIL VARCHAR2, S_A VARCHAR2 )
IS

BEGIN
INSERT INTO  CUSTOMER(CUST_ID , CUST_NAME ,CUST_PHONE,CUST_MAIL_ID ,SHOP_ADD )
VALUES ( CID, C_N, C_PH, C_MAIL, S_A );
END;

EXECUTE E_OID();

SELECT * FROM CUSTOMER;

CREATE OR REPLACE PROCEDURE ORD(ORD_ID NUMBER,CU_ID NUMBER,OD_DT DATE,EXP_DT DATE)
IS
BEGIN
INSERT INTO ORDERS (ORDER_ID, CUST_ID, ORDER_DATE , EXP_DISP_DATE)
VALUES(ORD_ID, CU_ID ,OD_DT ,EXP_DT);
END;

EXECUTE ORD();

SELECT * FROM ORDERS;
--=================================================================================================================================================
--CURSOR

SET SERVEROUTPUT ON 
DECLARE
CURSOR ORDERS
IS

SELECT * FROM PRO_DETAIL;

BEGIN 
FOR P IN ORDERS
LOOP
DBMS_OUTPUT.PUT_LINE(P.PRO_ID|| ' '|| P.PRO_JOB_ID || ' '|| P.PRO_JOB_QTY || ' '|| P.TOTAL_COST);
END LOOP ;
END;


--=======================================================================================================================================
JOIN

SELECT C.CUST_ID,C.CUST_NAME,C.CUST_MAIL_ID ,C.SHOP_ADD,
O.ORDER_ID,O.CUST_ID,O.ORDER_DATE,O.EXP_DISP_DATE,
I.BILL_ID,I.ORDER_ID,I.DISPATCH_DATE,I.TOTAL_AMOUNT,I.PAID_AMOUNT,I.DUE_AMOUNT
FROM CUSTOMER C JOIN ORDERS O
ON(C.CUST_ID=O.CUST_ID)
JOIN INVOICE I
ON(O.ORDER_ID=I.ORDER_ID);


--=======================================================================================================================================
--=============================================================================
--TRIGGER FOR UPDATE SCRAPED_STATUS IN YES OR NO

CREATE OR REPLACE TRIGGER SCR_STAT
AFTER INSERT OR UPDATE ON REJECTED_ORDER
FOR EACH ROW

DECLARE

BEGIN 
     IF ( TO_CHAR(SYSDATE,'HH24:MI')= '23:58')
    THEN
            UPDATE REJECTED_ORDER 
            SET SCRAPED_STATUS ='YES'
            WHERE MONTHS_BETWEEN (SYSDATE,REJECTION_DATE)>=1;

    ELSE
                RAISE_APPLICATION_ERROR(-20104,'SCRAPED_STATUS IS DONE ON 23:28');

    END IF;

END;

--=======================================================================================================================================
--TRIGGER FOR UPDATE SCRAPED_STATUS

CREATE OR REPLACE TRIGGER SCR_TRI
AFTER INSERT OR UPDATE ON REJECTED_ORDER
FOR EACH ROW

DECLARE
PJ_ID NUMBER;
PJ_QTY NUMBER;
SC_CST NUMBER;
TL_CST NUMBER :=0;

BEGIN
    IF ( TO_CHAR(SYSDATE,'HH24:MI')= '23:58')
    THEN
        SELECT PRO_JOB_ID ,PRO_JOB_QTY INTO PJ_ID,PJ_QTY
        FROM REJECTED_ORDER
        WHERE SCRAPED_STATUS ='YES';

        SELECT TOTAL_COST INTO SC_CST
        FROM PRO_ORDER
        WHERE PRO_JOB_ID = PJ_ID;

        TL_CST := SC_CST*0.3;

        INSERT INTO SCRAP_PRO
        VALUES(PJ_QTY,PJ_ID,TL_CST);

    ELSE
        RAISE_APPLICATION_ERROR(-20103,'INSERTING WILL BE DONE ON 23:58');
    
    END IF;

END;

SELECT * FROM REJECTED_ORDER;
SELECT * FROM SCRAP_PRO;
--=======================================================================================================================================



